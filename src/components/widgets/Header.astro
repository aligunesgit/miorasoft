---
import { languages } from '~/i18n/ui';

const currentPath = Astro.url.pathname;
const currentLang = currentPath.startsWith('/tr') ? 'tr' : 'en';

// URL çevirisi için basit path translations
const pathTranslations: Record<string, string> = {
  '/about': '/hakkimizda',
  '/services': '/hizmetler',
  '/portfolio': '/portfolyo',
  '/contact': '/iletisim',
  '/blog': '/blog',
  '/getaquote': '/teklif-al',
  '/jewelry': '/mucevher',
  '/printondemand': '/baski-talebi',
  '/textile': '/tekstil',
};

// Reverse mapping (TR -> EN)
const reversePathTranslations: Record<string, string> = {};
for (const [en, tr] of Object.entries(pathTranslations)) {
  reversePathTranslations[tr] = en;
}

// Her dil için URL oluştur
function getUrlForLang(lang: string): string {
  if (lang === 'en') {
    // Türkçe'den İngilizce'ye
    if (currentPath === '/tr' || currentPath === '/tr/') {
      return '/';
    }
    
    const pathWithoutTr = currentPath.replace(/^\/tr/, '') || '/';
    
    // Eğer çeviri varsa, İngilizce'ye çevir
    if (reversePathTranslations[pathWithoutTr]) {
      return reversePathTranslations[pathWithoutTr];
    }
    
    return pathWithoutTr;
  } else {
    // İngilizce'den Türkçe'ye
    if (currentPath === '/') {
      return '/tr/';
    }
    
    // Eğer çeviri varsa, Türkçe'ye çevir
    if (pathTranslations[currentPath]) {
      return '/tr' + pathTranslations[currentPath];
    }
    
    // Çeviri yoksa direkt /tr ekle
    return '/tr' + currentPath;
  }
}

// Dil listesi
const langEntries = Object.entries(languages);
---

<div class="language-switcher">
  {
    langEntries.map(([lang, name]) => {
      const url = getUrlForLang(lang);
      const isActive = currentLang === lang;
      
      return (
        <a 
          href={url}
          class:list={['lang-link', { active: isActive }]}
          data-lang={lang}
          aria-label={`Switch to ${name}`}
        >
          <span class="lang-code">{lang.toUpperCase()}</span>
        </a>
      );
    })
  }
</div>

<script>
  // Cookie ayarla
  document.querySelectorAll('.lang-link').forEach(link => {
    link.addEventListener('click', (e) => {
      const lang = (e.currentTarget as HTMLElement).getAttribute('data-lang');
      if (lang) {
        const maxAge = 60 * 60 * 24 * 30; // 30 gün
        document.cookie = `preferred-lang=${lang}; path=/; max-age=${maxAge}; SameSite=Lax`;
      }
    });
  });
</script>

<style>
  .language-switcher {
    display: flex;
    gap: 0.25rem;
    align-items: center;
  }
  
  .lang-link {
    display: flex;
    align-items: center;
    justify-content: center;
    min-width: 2.5rem;
    height: 2.5rem;
    padding: 0.5rem;
    border-radius: 6px;
    text-decoration: none;
    font-weight: 600;
    transition: all 0.2s ease;
    border: 1px solid transparent;
    background-color: transparent;
  }
  
  .lang-code {
    font-size: 0.75rem;
    font-weight: 700;
    letter-spacing: 0.05em;
  }
  
  .lang-link.active {
    background-color: var(--aw-color-primary, #007bff);
    color: white;
    border-color: var(--aw-color-primary, #007bff);
  }
  
  .lang-link:not(.active) {
    color: var(--aw-color-text-muted, #6b7280);
    border-color: var(--aw-color-border, #e5e7eb);
  }
  
  .lang-link:not(.active):hover {
    background-color: var(--aw-color-bg-page, #f9fafb);
    border-color: var(--aw-color-primary, #007bff);
    color: var(--aw-color-primary, #007bff);
  }

  /* Dark mode support */
  :global(.dark) .lang-link:not(.active) {
    color: var(--aw-color-text-muted, #9ca3af);
    border-color: var(--aw-color-border, #374151);
  }
  
  :global(.dark) .lang-link:not(.active):hover {
    background-color: var(--aw-color-bg-page, #1f2937);
    border-color: var(--aw-color-primary, #007bff);
  }
  
  :global(.dark) .lang-link.active {
    background-color: var(--aw-color-primary, #007bff);
  }
</style>