---
import merge from 'lodash.merge';
import { AstroSeo } from '@astrolib/seo';

import type { Props as AstroSeoProps } from '@astrolib/seo';

// Production config - config.yaml'dan gelecek
const SITE = { name: 'MIORA' };
const METADATA = {
  title: { default: 'MIORA - Expert Shopify Development Agency', template: '%s | MIORA' },
  description: 'Professional Shopify development, custom themes, speed optimization & seamless migrations. Transform your e-commerce vision into reality.',
  robots: { index: true, follow: true },
  openGraph: {
    site_name: 'MIORA - Shopify Experts',
    type: 'website',
    images: [
      {
        url: 'https://miorasoft.com/images/og-image.png',
        width: 1200,
        height: 630,
        alt: 'MIORA - Professional Shopify Development & Migration Services'
      }
    ]
  },
  twitter: {
    handle: '@arthelokyo',
    site: '@arthelokyo',
    cardType: 'summary_large_image'
  }
};
const I18N = { language: 'en' };

import type { MetaData } from '~/types';
import { adaptOpenGraphImages } from '~/utils/images';

// getCanonical fonksiyonu - Production URL
const getCanonical = (path: string) => {
  const baseUrl = Astro.site?.toString().replace(/\/$/, '') || 'https://miorasoft.com';
  try {
    return new URL(path, baseUrl).href;
  } catch (e) {
    return baseUrl + path;
  }
};

export interface Props extends MetaData {
  dontUseTitleTemplate?: boolean;
}

const {
  title,
  ignoreTitleTemplate = false,
  canonical = getCanonical(Astro.url.pathname),
  robots = {},
  description,
  openGraph = {},
  twitter = {},
} = Astro.props;

const seoProps: AstroSeoProps = merge(
  {
    title: '',
    titleTemplate: '%s',
    canonical: canonical,
    noindex: false,  // Production'da false olmalı
    nofollow: false, // Production'da false olmalı
    description: undefined,
    openGraph: {
      url: canonical,
      site_name: SITE?.name,
      images: [],
      locale: I18N?.language || 'en',
      type: 'website',
    },
    twitter: {
      handle: METADATA?.twitter?.handle,
      site: METADATA?.twitter?.site,
      cardType: openGraph?.images?.length ? 'summary_large_image' : 'summary',
    },
  },
  {
    title: METADATA?.title?.default,
    titleTemplate: METADATA?.title?.template,
    noindex: typeof METADATA?.robots?.index !== 'undefined' ? !METADATA.robots.index : undefined,
    nofollow: typeof METADATA?.robots?.follow !== 'undefined' ? !METADATA.robots.follow : undefined,
    description: METADATA?.description,
    openGraph: METADATA?.openGraph,
    twitter: METADATA?.twitter,
  },
  {
    title: title,
    titleTemplate: ignoreTitleTemplate ? '%s' : undefined,
    canonical: canonical,
    noindex: typeof robots?.index !== 'undefined' ? !robots.index : undefined,
    nofollow: typeof robots?.follow !== 'undefined' ? !robots.follow : undefined,
    description: description,
    openGraph: { url: canonical, ...openGraph },
    twitter: twitter,
  }
);
---

<AstroSeo {...{ ...seoProps, openGraph: await adaptOpenGraphImages(seoProps?.openGraph, Astro.site) }} />